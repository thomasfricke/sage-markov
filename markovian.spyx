
import os
home=os.getcwd()

from sage.plot.plot import list_plot
from math import *

ctypedef unsigned long size_t
ctypedef double reactivity_t
ctypedef unsigned long rand55_t

cdef extern from "rand55.c":
  rand55_t rand55_s
  unsigned long init_rand55 ( unsigned long )
  
cdef extern from "createtable.c":
  rand55_t rand55_0s

cdef extern from "logclass.c":
  cdef struct lc_global:
    pass
  void lc_clear(lc_global *lc)

cdef extern from "sagemarkov.c":
  cell * cells


cdef extern from "sagemarkov.h":
  cdef struct cell:
    void * LC_DERIVED
    unsigned long n

  size_t number_of_cells
  unsigned long seed

  int topological_dimension
  size_t create_topology(const int dimension, const size_t edge)

cdef extern from "topology.c":
  size_t *topological_sizes
  
  int create_walk(size_t init_number_of_cells, unsigned long init_seed, double timescale)
  int destroy_walk()

  reactivity_t reactivity(size_t index)
  reactivity_t global_reactivity()

  void update_reactivity(size_t index)
  int run_walk(size_t iterations)
  size_t run_walk_until(double time)


  double markov_time, timescale

cdef extern from "model.c":
  double decay_rate
  double diffusion_rate
  


def center():
  c=0
  for d in range(topological_dimension):
    c += topological_sizes[d+1]/2
  return int(c)

 
def index(*array):
  min=topological_dimension
  if len(array) < topological_dimension:
     min=len(array)

  i=0;
  for d in range(min):
    i+=array[d] * topological_sizes[d]

  return i

def coords(index):
  a=[]

  for d in range(topological_dimension):
    dc=index % topological_sizes[d+1]
    a.append(dc/topological_sizes[d])
    index -= dc
  return a

def distance(index1, index2):
  
  a1=coords(index1)
  a2=coords(index2)
  
  s=0.0
  
  for d in range(topological_dimension):
    a = abs(a1[d]-a2[d])
    if a > topological_sizes[d+1]/2:
      a-=topological_sizes[d+1]/2
    s+=a*a
#    print("t={} a1={} a2={} a={} s={}".format(topological_sizes[d+1],a1,a2,a,s))

  return s

def matches(index,*ranges):
  min=topological_dimension
  if len(ranges) < topological_dimension:
    min=len(ranges)

  crd=coords(index)
  i=0
  for r in ranges:
    if r != None and not ( crd[i] in r ):
        return False
    i+=1

  return True

def update(index):
  if index < 0 or index >= number_of_cells:
    raise MarkovianRangeException("index=%d" % index,"the index must be in the range=0 .. %d" % number_of_cells)
  update_reactivity(index)

class multi_range:

    def __init__(self, *ranges, return_fun=lambda l: l):
      self.return_fun = return_fun
      self.iterators = []
      self.ranges = ranges
      self.values = []
      for r in self.ranges:
        i=iter(r)
        self.iterators.append(i)
        self.values.append(i.next())

      self.dim = len( ranges)

    def __iter__(self):
      while True:
        yield self.return_fun(self.values)
        d=0
        while d < self.dim:
          try:
            self.values[d] = self.iterators[d].next()
          except StopIteration:
            i=iter(self.ranges[d])
            self.iterators[d]=i
            self.values[d]=i.next()
            d += 1
            continue
          else:
            break
        else:
          raise StopIteration()

class MarkovianRangeException(BaseException):
  """Range check exception"""
  def __init__(self, expr, msg):
        self.args = (expr, msg)

class Markovian:

  def __init__(self,dimension,size, seed=0, timescale=1, initial=None):
    self.create(dimension, size, seed, timescale)
    self.dimension=dimension
    self.size=size
    self.seed=seed
    self.timescale=timescale
    self.initial=initial

    self.reinit()

  def create(self,dimension, size, seed=0, timescale=1):
    if not size >0:
      raise MarkovianRangeException("size=%d" % size,"the size must be a positive number")

    if not timescale >0:
      raise MarkovianRangeException("timescale=%f" % timescale,
        "the timescale must be a positive number")

    number_of_cells=create_topology(dimension, size)
    self.number_of_cells=number_of_cells
    return create_walk(number_of_cells, seed, timescale)

  def destroy(self):
    return destroy_walk()

  def cell(self,index,n=None):

    if index < 0 or index >= number_of_cells:
      raise MarkovianRangeException("index=%d" % index,"the index must be in the range=0 .. %d" % number_of_cells)

    if n:
      if n<0:
        raise MarkovianRangeException("n=%d" % n,"the number of walkers n must be n >= 0")
      cells[index].n=n
      update(index)

    return cells[index].n


  def reactivity(self,index=None):
    if index:
      return reactivity(index)
    else:
      return global_reactivity()

  def diffusion_rate(self, d=None):
    if d:
      diffusion_rate=d

    return diffusion_rate

  def volume(self):
    return topological_volume()

  def reinit(self):
    self.destroy()

    self.create(dimension=self.dimension,
      size=self.size,seed=self.seed,timescale=self.timescale)

    if self.initial:
      self.initial_conditions(self.initial)

  def run(self,iterations):
    if run_walk(iterations) == -1 and self.number_of_cells > 0 :
      reinit()
      run_walk(iterations)

    return markov_time
  
  def run_until(self, time):
    r = run_walk_until(time)
    if r == -1 and self.number_of_cells > 0 :
      reinit()
      r = run_walk_until(time)
    
    return r
     

  def time(self):
    return markov_time

  def decay_rate(self,r=None):
    global decay_rate
    if r:
      decay_rate=r

    return decay_rate

  def initial_conditions(self,initial):
    self.initial=initial
    for k in initial:
      self.cell(k,initial[k]+self.cell(k))

  def all_cells(self, cond=lambda index: True,
                range_iterator= None) :
    if range_iterator==None:
      range_iterator=range(self.number_of_cells )

    ne={}
    for i in range_iterator:
      if cond(i):
        ne[i]=self.cell(i)
    return ne

  def non_empty_cells(self, f=0, t=None):
    if t == None:
        t=self.number_of_cells
    return self.all_cells(cond = lambda i: self.cell(i) > 0, range_iterator=range(f,t) )

  def slice(self, ranges):
    return self.all_cells(cond=lambda i: matches(i,*ranges))

  def loop(self,*ranges):
    min = len(ranges)
    if self.dimension < min:
      min = self.dimension

    loop_ranges =[]

    for l in range(self.dimension):
      if l<min and ranges[l]:
        rl = ranges[l]
        if  rl == None:
          loop_ranges.append(range(self.size))
        else:
          if isinstance(rl,list):
            loop_ranges.append(rl)
          else:
            loop_ranges.append(range(rl,rl+1))
      else:
        loop_ranges.append(range(self.size))

    return loop_ranges

  def analytic(self):
    c=center()
    df    = self.peak * pow(2.0/self.dimension*pi *self.time() ,-self.dimension*0.5)
    dct   = self.decay_rate()*self.time()
    dimt2 = - 1.0/ ( 2.0/self.dimension*self.time() )
    return lambda x:  df *exp( distance(c,x)* dimt2  - dct  ) 

  def gauss(self):
     import random
     c=center()
     s=sqrt(self.time())
     a={}
     for count in range(self.peak):
       i=int(random.gauss(c,s)+0.5)
       if i>0 and i<self.size :
         if i in a:
           a[i]=a[i]+1
         else:
           a[i]=1
 
     return a


  def plot(self,f=0,t=None,color='blue'):
    return list_plot(self.non_empty_cells(f=f,t=t),color=color)

  def analytic_plot(self,f=0, t=None, color='red',plotjoined=True):
    a=self.non_empty_cells(f=f,t=t)
    for i in a:
      a[i]=self.analytic()(i)

    return list_plot(a,color=color,plotjoined=plotjoined)

  def sum_walker(self):
    sum=0
    for c in self.all_cells():
      sum = sum + cells[c].n

    return sum

  def value_by_time(self,fun,steps=1000):
    time_series={}

    while self.reactivity() > 0:
      time_series[self.time()]=fun()
      self.run(steps)

    return time_series

  def write_to_file(self,filename="out.dat"):
    f=open(filename,"w")
    for c in self.all_cells():
        sim = self.cell(c)
        an  = self.analytic()(c)
        err = sqrt(self.cell(c))
        f.write('{0:d}\t{1:d}\t{2:f}\t{3:f}\n'.format(c, sim, an, err))
    f.close()

  def info(self):
    dict=self.__dict__
#    dict["non_empty_cells"]=self.non_empty_cells()
    return dict

  @classmethod
  def demo(cls,dimension=1, size=100, peak=None,decay_rate=0.01,seed=0):
    
    m=Markovian(dimension, size,seed=seed)
    
    if peak == None:
        peak=100000
    
    c=center()
    initial={ c: peak}
 
    m.peak=peak
    
    m.initial_conditions(initial)

    m.decay_rate(decay_rate)
#    m.run(1000000)
#    m.write_to_file()
    return m

  @classmethod
  def gnuplot_string(cls):
    return  'reset\np "out.dat" u 1:2:4 t "simulation" with err, "out.dat" u 1:3 t "analytic" with linespoints smooth unique'

